use std::collections::HashMap;
use std::io::{self, Write};

#[derive(Debug, Clone)]
struct Student {
    name: String,
    age: u8,
    grade: f32,
}

impl Student {
    fn new(name: String, age: u8, grade: f32) -> Self {
        Student { name, age, grade }
    }
    
    fn display(&self) {
        println!("‡∏ä‡∏∑‡πà‡∏≠: {}, ‡∏≠‡∏≤‡∏¢‡∏∏: {} ‡∏õ‡∏µ, ‡πÄ‡∏Å‡∏£‡∏î: {:.2}", self.name, self.age, self.grade);
    }
}

struct StudentManager {
    students: HashMap<String, Student>,
}

impl StudentManager {
    fn new() -> Self {
        StudentManager {
            students: HashMap::new(),
        }
    }
    
    fn add_student(&mut self, student: Student) {
        let id = format!("{}-{}", student.name, student.age);
        self.students.insert(id, student);
        println!("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
    }
    
    fn list_students(&self) {
        if self.students.is_empty() {
            println!("üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
            return;
        }
        
        println!("\nüìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:");
        println!("{:-<50}", "");
        for (i, student) in self.students.values().enumerate() {
            print!("{}. ", i + 1);
            student.display();
        }
        println!("{:-<50}", "");
    }
    
    fn find_student(&self, name: &str) {
        let found: Vec<&Student> = self.students
            .values()
            .filter(|s| s.name.to_lowercase().contains(&name.to_lowercase()))
            .collect();
            
        if found.is_empty() {
            println!("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ '{}'", name);
        } else {
            println!("\nüîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:");
            for student in found {
                student.display();
            }
        }
    }
    
    fn calculate_average(&self) -> f32 {
        if self.students.is_empty() {
            return 0.0;
        }
        
        let total: f32 = self.students.values().map(|s| s.grade).sum();
        total / self.students.len() as f32
    }
    
    fn show_statistics(&self) {
        if self.students.is_empty() {
            println!("üìä ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥");
            return;
        }
        
        let grades: Vec<f32> = self.students.values().map(|s| s.grade).collect();
        let avg = self.calculate_average();
        let max = grades.iter().fold(f32::NEG_INFINITY, |a, &b| a.max(b));
        let min = grades.iter().fold(f32::INFINITY, |a, &b| a.min(b));
        
        println!("\nüìä ‡∏™statistics‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:");
        println!("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {} ‡∏Ñ‡∏ô", self.students.len());
        println!("‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {:.2}", avg);
        println!("‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {:.2}", max);
        println!("‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {:.2}", min);
    }
}

fn get_input(prompt: &str) -> String {
    print!("{}", prompt);
    io::stdout().flush().unwrap();
    
    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap();
    input.trim().to_string()
}

fn show_menu() {
    println!("\nüéì ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
    println!("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
    println!("2. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
    println!("3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
    println!("4. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥");
    println!("5. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°");
    println!("{:=<30}", "");
}

fn main() {
    let mut manager = StudentManager::new();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    manager.add_student(Student::new("‡∏™‡∏°‡∏ä‡∏≤‡∏¢".to_string(), 20, 3.25));
    manager.add_student(Student::new("‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á".to_string(), 19, 3.75));
    manager.add_student(Student::new("‡∏ß‡∏¥‡∏ä‡∏±‡∏¢".to_string(), 21, 2.80));
    
    loop {
        show_menu();
        let choice = get_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-5): ");
        
        match choice.as_str() {
            "1" => {
                println!("\n‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà");
                let name = get_input("‡∏ä‡∏∑‡πà‡∏≠: ");
                
                if name.is_empty() {
                    println!("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠");
                    continue;
                }
                
                let age_str = get_input("‡∏≠‡∏≤‡∏¢‡∏∏: ");
                let age: u8 = match age_str.parse() {
                    Ok(a) if a > 0 && a < 100 => a,
                    _ => {
                        println!("‚ùå ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                        continue;
                    }
                };
                
                let grade_str = get_input("‡πÄ‡∏Å‡∏£‡∏î (0.00-4.00): ");
                let grade: f32 = match grade_str.parse() {
                    Ok(g) if g >= 0.0 && g <= 4.0 => g,
                    _ => {
                        println!("‚ùå ‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                        continue;
                    }
                };
                
                manager.add_student(Student::new(name, age, grade));
            },
            "2" => manager.list_students(),
            "3" => {
                let name = get_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠: ");
                if !name.is_empty() {
                    manager.find_student(&name);
                }
            },
            "4" => manager.show_statistics(),
            "5" => {
                println!("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!");
                break;
            },
            _ => println!("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π 1-5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"),
        }
        
        println!("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...");
        let _ = get_input("");
    }
}